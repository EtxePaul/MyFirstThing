FUNCTION FC1826 : VOID
    TITLE = 'PYROCONTROL_LH12'
    VERSION : '1.0'
    KNOW_HOW_PROTECT
    NAME : 'Talens'
    AUTHOR : 'Talens'   
    
VAR
POWER                     : WORD;
POWER_RATIO, SPEED_RATIO  : REAL;
PART_TYPE                 : INT;
CURRENT_JOURNAL           : INT;
CURRENT_BORE              : INT;
END_VAR

BEGIN 

CURRENT_JOURNAL := DB1220.FD_CHANNEL_1.Journal_Counter;
CURRENT_BORE    := DB1220.FD_CHANNEL_1.Bore_Counter;
PART_TYPE       := BYTE_TO_INT(DB1965.Part_Type_Low);
POWER_RATIO     := DINT_TO_REAL(DB2500.LH12_RECV_DATA.POWER_RATIO)/1000;
SPEED_RATIO     := DINT_TO_REAL(DB2500.LH12_RECV_DATA.SPEED_RATIO);
DB1810.PYROCONTROL_LH12.PID.DTIME:=0.005;         //SCAN CYCLE TIME; 

DB1810.PYROCONTROL_LH12.PID.HMI_MAX_POWER := 5000.0;

//-----------------------Transfering the values dependieng on Bore and Journal---------------

//IF Ambos cabezales activos esto

DB700.LH12.Power_Init_Current := DB700.BOTH_LH_ENABLED.BORE[CURRENT_BORE].POWER_INIT[CURRENT_JOURNAL];
DB700.LH12.Timer_Init_Current := DB700.BOTH_LH_ENABLED.BORE[CURRENT_BORE].TIMER_INIT[CURRENT_JOURNAL];
DB700.LH12.Power_2_Current    := DB700.BOTH_LH_ENABLED.BORE[CURRENT_BORE].POWER_2[CURRENT_JOURNAL];
DB700.LH12.Timer_2_Current    := DB700.BOTH_LH_ENABLED.BORE[CURRENT_BORE].TIMER_2[CURRENT_JOURNAL];

//Si no, esto

IF DB700.LH12.Harden_step_1 THEN
  POWER :=  INT_TO_WORD(REAL_TO_INT(DB700.LH12.Power_Init_Current));
ELSIF DB700.LH12.Harden_step_2  THEN
  POWER :=  INT_TO_WORD(REAL_TO_INT(DB700.LH12.Power_2_Current));
END_IF;


//######################################## PYROMETER ########################################
DB1810.PYROCONTROL_LH12.PYROMETER_ACTUAL_TEMP := DB1810.PYROCONTROL_LH12.PYROMETER_GAIN * DB1810.PYROCONTROL_LH12.I_PYROMETER + DB1810.PYROCONTROL_LH12.PYROMETER_OFFSET;

IF NOT MCHN_SQ_SQ_RUNNING THEN
    DB1810.PYROCONTROL_LH12.OPTIMAL_OFFSET :=  500 - DB1810.PYROCONTROL_LH12.PYROMETER_GAIN * DB1810.PYROCONTROL_LH12.I_PYROMETER;  
ELSE
    DB1810.PYROCONTROL_LH12.OPTIMAL_OFFSET := 0;    
END_IF;
//###########################################################################################    

//###################################### AXIS A SPEED ########################################
IF (SPEED_RATIO > 0 AND SPEED_RATIO <= 2000) THEN
  DB1810.PYROCONTROL_LH12.SPEED_RATIO    := (SPEED_RATIO/10);
ELSE
  DB1810.PYROCONTROL_LH12.SPEED_RATIO    :=100;
END_IF;    
//###########################################################################################

//#############################POWER CORRECTION##############################################
DB1810.PYROCONTROL_LH12.CORR_POWER_H:=DB1267.POWER_CORR_LH12.POWER_H[PART_TYPE,CURRENT_BORE,CURRENT_JOURNAL];

IF AZ_LH12_SQ_SEQ_RUNNING AND DB1860.SENSOR_12.EmissionOn THEN
  POWER := DINT_TO_WORD(DB1860.SENSOR_12.CommandPower);
END_IF; 

IF DB1210.M_CODES_UNIT_01R.M46 OR AZ_LH12_SQ_SEQ_RUNNING THEN
    DB1810.PYROCONTROL_LH12.CORR_OUT_POWER := INT_TO_REAL(WORD_TO_INT(POWER));
ELSE
    DB1810.PYROCONTROL_LH12.CORR_OUT_POWER := 0;
END_IF;

// Laser command power check: M100.0 -> UA_RTR_AX_SPD_CHCK
// Command power greater than 10% of (Laser max power): UA_RTR_AX_SPD_CHCK = TRUE

IF DB1810.PYROCONTROL_LH12.CORR_OUT_POWER >= DB1810.PYROCONTROL_LH12.PID.HMI_MAX_POWER*0.1 THEN
  laserCmdPowerCheck_LH12:=TRUE;
END_IF;

IF (DB1810.PYROCONTROL_LH12.CORR_OUT_POWER < DB1810.PYROCONTROL_LH12.PID.HMI_MAX_POWER*0.1) OR (DB1210.M_CODES_UNIT_01R.M11=TRUE) OR (CCL_A_SQ_RUNNING=FALSE AND AZ_LH12_SQ_SEQ_RUNNING=FALSE) THEN
  laserCmdPowerCheck_LH12:=FALSE;
END_IF;

// Rotary axis speed check: M100.1 -> UA_RTR_AX_SPD_CHCK
// Speed = 0 : UA_RTR_AX_SPD_CHCK = TRUE
 
IF DB2500.LH12_SENT_DATA.PROCESS_SPEED = 0 THEN
  rotaryAxisSpeedCheck_H12:=TRUE;
ELSIF DB2500.LH12_SENT_DATA.PROCESS_SPEED > 0 OR CCL_A_SQ_RUNNING=FALSE THEN
  rotaryAxisSpeedCheck_H12:=FALSE;
END_IF;
//###########################################################################################

IF (NOT LSR_12_ACT_LASER_ACT_ON) THEN
  POWER:=0;
END_IF;

DB1178.laser_12.Outputs.Power := WORD_TO_INT(ROL(IN:=POWER , N:=8));

//###########################################################################################
    
END_FUNCTION
